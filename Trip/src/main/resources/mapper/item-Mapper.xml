<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 모든 SQL문을 mapper태그 안에 작성 -->
<mapper namespace="itemMapper">
	<resultMap type="com.project.trip.item.vo.ItemVO" id="item">
		<id column="ITEM_CODE" property="itemCode" />
		<result column="ITEM_NAME" property="itemName" />
		<result column="ITEM_PRICE" property="itemPrice" />
		<result column="ITEM_DETAIL" property="itemDetail" />
		<result column="START_DATE" property="startDate" />
		<result column="END_DATE" property="endDate" />
		<result column="TRIP_DATE" property="tripDate" />
		<result column="CATE_CODE" property="cateCode" />
		<result column="ROW_NUM" property="rowNum"/>
		<result column="TRIP_ADDR" property="tripAddr"/>
		<result column="LATITUDE" property="latitude"/>
		<result column="LONGITUDE" property="longitude"/>
		<result column="RATE_AVG" property="rateAvg"/>
		<result column="TRIP_ADDR" property="tripAddr"/>
		<result column="TRIP_AREA" property="tripArea"/>
		<result column="ATTACHED_IMG_NAME" property="attachedImgName"/>
		<association property="itemCateVO" resultMap="adminMapper.itemCate"/>
		<collection property="imageList" resultMap="image"/>
	</resultMap>
	
	<resultMap type="com.project.trip.item.vo.ImageVO" id="image">
		<id column="IMG_CODE" property="imgCode"/>
		<result column="ORIGIN_IMG_NAME" property="originImgName"/>
		<result column="ATTACHED_IMG_NAME" property="attachedImgName"/>
		<result column="IS_MAIN" property="isMain"/>
		<result column="ITEM_CODE" property="itemCode"/>
	</resultMap>
	
	<resultMap type="com.project.trip.item.vo.ReviewVO" id="review">
		<id column="REVIEW_NUM" property="reviewNum"/>
		<result column="ITEM_RATE" property="itemRate"/>
		<result column="TITLE" property="title"/>
		<result column="WRITER" property="writer"/>
		<result column="MEM_NAME" property="memName"/>
		<result column="CONTENT" property="content"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="READ_CNT" property="readCnt"/>
		<result column="ITEM_CODE" property="itemCode"/>
		<result column="ROW_NUM" property="rowNum"/>
		<result column="LIKES_CNT" property="likesCnt"/>
		<result column="REPLY_CNT" property="replyCnt"/>
		<association property="itemVO" resultMap="item"/>
		<collection property="reviewLikeVO" resultMap="reviewLike"/>
	</resultMap>
	
	<resultMap type="com.project.trip.item.vo.ReviewLikeVO" id="reviewLike">
		<id column="LIKE_NUM" property="likeNum"/>
		<result column="REVIEW_NUM" property="reviewNum"/>		
		<result column="MEM_ID" property="memId"/>		
	</resultMap>
	
	<resultMap type="com.project.trip.item.vo.ReviewReplyVO" id="reviewReply">
		<id column="REPLY_NUM" 							property="replyNum"/>
		<result column="CONTENT" 						property="content"/>
		<result column="CREATE_DATE" 					property="createDate"/>
		<result column="REVIEW_NUM" 					property="reviewNum"/>
		<result column="WRITER" 						property="writer"/>
		<result column="MEM_NAME" 						property="memName"/>
	</resultMap>
	
	<!-- 상품 목록 조회 쿼리 -->
	<select id="selectItemList" resultMap="item">
		SELECT ITEM.ITEM_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, ITEM_DETAIL
			, ATTACHED_IMG_NAME
			, TRIP_DATE
			, TO_CHAR(START_DATE, 'YYYY-MM-DD') AS START_DATE
			, TO_CHAR(END_DATE, 'YYYY-MM-DD') AS END_DATE
			, CATE_CODE
			, TRIP_ADDR
			, TRIP_AREA
			, (SELECT CATE_NAME
				FROM ITEM_CATE
				WHERE CATE_CODE = ITEM.CATE_CODE) AS CATE_NAME
			, (SELECT ROUND(NVL(AVG(ITEM_RATE),0), 1)
		        FROM ITEM_REVIEW
		        WHERE ITEM_CODE=ITEM.ITEM_CODE) AS RATE_AVG
		FROM TRIP_ITEM ITEM, ITEM_IMAGE IMG
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE 
		AND IS_MAIN = 'Y'
		<if test="cateCode != null and !cateCode.equals('')">
		AND CATE_CODE = #{cateCode}
		</if>
		<if test="itemName != null and !itemName.equals('')">
		AND UPPER(ITEM_NAME) LIKE UPPER('%'||#{itemName}||'%')
		</if>
		<if test="startDate != null and !startDate.equals('')">
		AND START_DATE >= #{startDate}
		</if>
		ORDER BY ITEM.ITEM_CODE DESC
	</select>
	
	<select id="selectItemDetail" resultMap="item">
		SELECT ITEM.ITEM_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, ITEM_DETAIL
			, ATTACHED_IMG_NAME
			, TRIP_DATE
			, TRIP_ADDR
			, LATITUDE
			, LONGITUDE
			, TO_CHAR(START_DATE, 'YYYY-MM-DD') AS START_DATE
			, TO_CHAR(END_DATE, 'YYYY-MM-DD') AS END_DATE
			, CATE_CODE
			, (SELECT CATE_NAME FROM ITEM_CATE WHERE CATE_CODE = #{cateCode}) AS TRIP_AREA
			, (SELECT ROUND(NVL(AVG(ITEM_RATE),0), 1)
		        FROM ITEM_REVIEW
		        WHERE ITEM_CODE=ITEM.ITEM_CODE) AS RATE_AVG
			, IS_MAIN
		FROM TRIP_ITEM ITEM, ITEM_IMAGE IMG
		WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE 
		<if test="cateCode != null and !cateCode.equals('')">
		AND CATE_CODE = #{cateCode}
		</if>
		AND ITEM.ITEM_CODE = #{itemCode}
	</select>
	
	<!-- 삭제할 상품 이미지목록 -->
	<select id="selectImageList" resultMap="image">
		SELECT ATTACHED_IMG_NAME
		FROM ITEM_IMAGE
		WHERE ITEM_CODE IN 
		<foreach item="itemCode" collection="itemCodeArr" open="(" close=")" separator=", ">#{itemCode}</foreach>
	</select>
	
	<insert id="insertReview">
		INSERT INTO ITEM_REVIEW (
			REVIEW_NUM
			, ITEM_RATE
			, TITLE
			, WRITER
			, CONTENT
			, ITEM_CODE
		) VALUES (
			(SELECT NVL(MAX(REVIEW_NUM), 0) + 1 FROM ITEM_REVIEW)
			, #{itemRate}
			, #{title}
			, #{writer}
			, #{content}
			, #{itemCode}
		)
	</insert>
	
	<select id="selectReviewList" resultMap="review">
		SELECT REVIEW_NUM
            , TITLE
           	<!--  , CONTENT -->
            , WRITER
            , MEM_NAME
            , ITEM_RATE
            , CREATE_DATE
            , READ_CNT
            , ITEM_CODE
			, ITEM_NAME
			, LIKES_CNT
			, REPLY_CNT
	        , ROW_NUM
		FROM (
			SELECT REVIEW_NUM
	            , TITLE
	           	<!--  , CONTENT -->
	            , WRITER
	            , MEM_NAME
	            , ITEM_RATE
	            , CREATE_DATE
	            , READ_CNT
	            , ITEM_CODE
				, ITEM_NAME
				, LIKES_CNT
				, REPLY_CNT
		        , ROWNUM AS ROW_NUM
		    FROM (
		    	SELECT REVIEW_NUM
		            , TITLE
		           	<!--  , CONTENT -->
		            , WRITER
		            , (SELECT MEM_NAME
						FROM TRIP_MEMBER
						WHERE MEM_ID = ITEM_REVIEW.WRITER) AS MEM_NAME
		            , ITEM_RATE
		            , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		            , READ_CNT
		            , ITEM_CODE
					, (SELECT ITEM_NAME
						FROM TRIP_ITEM
						WHERE ITEM_CODE = ITEM_REVIEW.ITEM_CODE) AS ITEM_NAME
					, (SELECT COUNT(LIKE_NUM)
						FROM REVIEW_LIKE
						WHERE REVIEW_NUM=ITEM_REVIEW.REVIEW_NUM) AS LIKES_CNT
					, (SELECT COUNT(REPLY_NUM)
		            	FROM REVIEW_REPLY
		            	WHERE REVIEW_NUM = ITEM_REVIEW.REVIEW_NUM) AS REPLY_CNT
		        FROM ITEM_REVIEW
		        WHERE 1 = 1
		        <choose>
					<when test="title != null and !title.equals('') and content != null and !content.equals('')">
						AND UPPER(CONTENT) LIKE UPPER('%'||#{content}||'%')
						OR UPPER(TITLE) LIKE UPPER('%'||#{title}||'%')
					</when>
					<when test="title != null and !title.equals('')">
						AND UPPER(TITLE) LIKE UPPER('%'||#{title}||'%')
					</when>
					<when test="content != null and !content.equals('')">
						AND UPPER(CONTENT) LIKE UPPER('%'||#{content}||'%')
					</when>
					<when test="writer != null and !writer.equals('')">
						AND UPPER(WRITER) LIKE UPPER('%'||#{writer}||'%')
						OR UPPER((SELECT MEM_NAME
									FROM TRIP_MEMBER
									WHERE MEM_ID = ITEM_REVIEW.WRITER)) LIKE UPPER('%'||#{writer}||'%')
					</when>
				</choose>
		        ORDER BY REVIEW_NUM DESC
		        )
	        )
       WHERE ROW_NUM &gt;= #{startNum} AND ROW_NUM &lt;= #{endNum}
	</select>
	
	<select id="selectBestReview" resultMap="review">
		SELECT REVIEW_NUM
            , TITLE
            , WRITER
            , MEM_NAME
            , ITEM_RATE
            , CREATE_DATE
            , READ_CNT
            , ITEM_CODE
			, ITEM_NAME
			, LIKES_CNT
			, REPLY_CNT
			, ROW_NUM
        FROM (
        	SELECT REVIEW_NUM
	            , TITLE
	            , WRITER
	            , MEM_NAME
	            , ITEM_RATE
	            , CREATE_DATE
	            , READ_CNT
	            , ITEM_CODE
				, ITEM_NAME
				, LIKES_CNT
				, REPLY_CNT
				, ROWNUM AS ROW_NUM
	        FROM (
	        	SELECT REVIEW_NUM
		            , TITLE
		            , WRITER
		            , (SELECT MEM_NAME
						FROM TRIP_MEMBER
						WHERE MEM_ID = ITEM_REVIEW.WRITER) AS MEM_NAME
		            , ITEM_RATE
		            , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		            , READ_CNT
		            , ITEM_CODE
					, (SELECT ITEM_NAME
						FROM TRIP_ITEM
						WHERE ITEM_CODE = ITEM_REVIEW.ITEM_CODE) AS ITEM_NAME
					, (SELECT COUNT(LIKE_NUM)
						FROM REVIEW_LIKE
						WHERE REVIEW_NUM=ITEM_REVIEW.REVIEW_NUM) AS LIKES_CNT
					, (SELECT COUNT(REPLY_NUM)
		            	FROM REVIEW_REPLY
		            	WHERE REVIEW_NUM = ITEM_REVIEW.REVIEW_NUM) AS REPLY_CNT
		        FROM ITEM_REVIEW
		        ORDER BY LIKES_CNT DESC
		        )
	        )
        WHERE ROW_NUM &lt;= #{rowNum}
	</select>
	
	<select id="selectReviewDetail" resultMap="review">
		SELECT REVIEW_NUM
			, ITEM_RATE
			, TITLE
			, WRITER
			, (SELECT MEM_NAME
				FROM TRIP_MEMBER
				WHERE MEM_ID = ITEM_REVIEW.WRITER) AS MEM_NAME
			, CONTENT
			, CREATE_DATE
			, READ_CNT
			, ITEM_CODE
			, (SELECT ITEM_NAME
				FROM TRIP_ITEM
				WHERE ITEM_CODE = ITEM_REVIEW.ITEM_CODE) AS ITEM_NAME
			, (SELECT COUNT(LIKE_NUM)
				FROM REVIEW_LIKE
				WHERE REVIEW_NUM=ITEM_REVIEW.REVIEW_NUM) AS LIKES_CNT
			, (SELECT COUNT(REPLY_NUM)
            	FROM REVIEW_REPLY
            	WHERE REVIEW_NUM = ITEM_REVIEW.REVIEW_NUM) AS REPLY_CNT
		FROM ITEM_REVIEW
		WHERE REVIEW_NUM = #{reviewNum}
	</select>
	
	<select id="selectReviewListCnt" resultType="int">
		SELECT COUNT(REVIEW_NUM)
		FROM ITEM_REVIEW
		WHERE 1 = 1
		<choose>
			<when test="title != null and !title.equals('') and content != null and !content.equals('')">
				AND UPPER(CONTENT) LIKE UPPER('%'||#{content}||'%')
				OR UPPER(TITLE) LIKE UPPER('%'||#{title}||'%')
			</when>
			<when test="title != null and !title.equals('')">
				AND UPPER(TITLE) LIKE UPPER('%'||#{title}||'%')
			</when>
			<when test="content != null and !content.equals('')">
				AND UPPER(CONTENT) LIKE UPPER('%'||#{content}||'%')
			</when>
			<when test="writer != null and !writer.equals('')">
				AND UPPER(WRITER) LIKE UPPER('%'||#{writer}||'%')
				OR UPPER((SELECT MEM_NAME
							FROM TRIP_MEMBER
							WHERE MEM_ID = ITEM_REVIEW.WRITER)) LIKE UPPER('%'||#{writer}||'%')
			</when>
		</choose>
	</select>
	
	<update id="updateReadCnt">
		UPDATE ITEM_REVIEW
		SET READ_CNT = READ_CNT + 1
		WHERE REVIEW_NUM = #{reviewNum}
	</update>

	<delete id="deleteReview">
		DELETE ITEM_REVIEW
		WHERE REVIEW_NUM = #{reviewNum}
	</delete>
	
	<update id="updateReview">
		UPDATE ITEM_REVIEW
		SET TITLE = #{title}
			, CONTENT = #{content}
		WHERE REVIEW_NUM = #{reviewNum}
	</update>
	
	<select id="selectMyReviewLikeCnt" resultType="int">
		SELECT COUNT(REVIEW_NUM)
		FROM REVIEW_LIKE
		WHERE MEM_ID = #{memId}
		AND REVIEW_NUM = #{reviewNum}
	</select>

	<insert id="insertMyReviewLike">
		INSERT INTO REVIEW_LIKE (
			LIKE_NUM
			, REVIEW_NUM
			, MEM_ID
		) VALUES (
			(SELECT NVL(MAX(LIKE_NUM), 0) + 1
         	FROM REVIEW_LIKE)
         	, #{reviewNum}
         	, #{memId}
		)
	</insert>
	
	<delete id="deleteMyReviewLike">
		DELETE REVIEW_LIKE
		WHERE REVIEW_NUM = #{reviewNum}
		AND MEM_ID = #{memId}
	</delete>
	
	<insert id="insertReviewReply">
		INSERT INTO REVIEW_REPLY (
			REPLY_NUM
			, CONTENT
			, WRITER
			, REVIEW_NUM
		) VALUES (
			(SELECT NVL(MAX(REPLY_NUM), 0) + 1 FROM REVIEW_REPLY)
			, #{content}
			, #{writer}
			, #{reviewNum} 
		)
	</insert>
	
	<delete id="deleteReviewReply">
		DELETE REVIEW_REPLY
		WHERE REPLY_NUM = #{replyNum}
	</delete>
	
	<select id="selectReplyList" resultMap="reviewReply">
		SELECT REPLY_NUM
			, CONTENT
			, TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
			, REVIEW_NUM
			, WRITER
			, (SELECT MEM_NAME
				FROM TRIP_MEMBER
				WHERE MEM_ID = REVIEW_REPLY.WRITER) AS MEM_NAME
		FROM REVIEW_REPLY
		WHERE REVIEW_NUM = #{reviewNum}
		ORDER BY REPLY_NUM DESC
	</select>
	
	<!-- 예약한 상품 목록 -->
	<select id="selectBookList" resultMap="buyMapper.bookView">
		SELECT DISTINCT ITEM_NAME
			, ITEM_CODE
		FROM BOOK_VIEW
		WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateReviewReply">
		UPDATE REVIEW_REPLY
		SET CONTENT = #{content}
			, CREATE_DATE = CURRENT_DATE
		WHERE WRITER = #{writer}
		AND REVIEW_NUM = #{reviewNum}
		AND REPLY_NUM = #{replyNum}
	</update>

	<!-- 예약된 개수 카운트 -->
	<select id="selectBookItemCnt" resultType="int">
		SELECT COUNT(ITEM_CODE)
		FROM BOOK_ITEM
		WHERE ITEM_CODE = #{itemCode}
	</select>
	
</mapper>










