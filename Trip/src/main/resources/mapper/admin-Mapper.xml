<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 모든 SQL문을 mapper태그 안에 작성 -->
<mapper namespace="adminMapper">

	<!-- 메뉴 -->
	<resultMap type="com.project.trip.admin.vo.MenuVO" id="menu">
		<id column="MENU_CODE" property="menuCode" />
		<result column="MENU_NAME" property="menuName" />
		<result column="MENU_URI" property="menuUri" />
	</resultMap>
	
	<!-- 서브메뉴 -->
	<resultMap type="com.project.trip.admin.vo.SubMenuVO" id="subMenu">
		<id column="SUB_MENU_CODE" property="subMenuCode" />
		<result column="MENU_CODE" property="menuCode" />
		<result column="SUB_MENU_NAME" property="subMenuName" />
		<result column="SUB_MENU_URI" property="subMenuUri" />
	</resultMap>
	
	<!-- 사이드메뉴 -->
	<resultMap type="com.project.trip.admin.vo.SideMenuVO" id="sideMenu">
		<id column="SIDE_MENU_CODE" property="sideMenuCode" />
		<result column="SIDE_MENU_NAME" property="sideMenuName" />
		<result column="SIDE_MENU_URI" property="sideMenuUri" />
		<result column="MENU_CODE" property="menuCode" />
		<result column="ADMIN_MENU_CODE" property="adminMenuCode"/>
	</resultMap>

	<!-- 관리자 메뉴 -->
	<resultMap type="com.project.trip.admin.vo.AdminMenuVO" id="adminMenu">
		<id column="ADMIN_MENU_CODE" property="adminMenuCode" />
		<result column="ADMIN_MENU_NAME" property="adminMenuName" />
		<result column="ADMIN_MENU_URI" property="adminMenuUri" />
	</resultMap>
	
	<!-- 상품카테고리(지역) -->
	<resultMap type="com.project.trip.item.vo.ItemCateVO" id="itemCate">
		<id column="CATE_CODE" property="cateCode" />
		<result column="CATE_NAME" property="cateName" />
	</resultMap>
	
	<!-- 메인화면 슬라이드 이미지 -->
	<resultMap type="com.project.trip.admin.vo.SlideImageVO" id="slideImage">
		<id column="IMG_CODE" property="imgCode"/>
		<result column="ORIGIN_IMG_NAME" property="originImgName"/>
		<result column="ATTACHED_IMG_NAME" property="attachedImgName"/>
		<result column="IMAGE_INDEX" property="imageIndex"/>
	</resultMap>
	
	<!-- 관리자메뉴 리스트 조회-->
	<select id="selectAdminMenuList" resultMap="adminMenu">
		SELECT ADMIN_MENU_CODE
			, ADMIN_MENU_NAME
			, ADMIN_MENU_URI
		FROM ADMIN_MENU
		ORDER BY ADMIN_MENU_CODE ASC
	</select>
	
	<!-- 이용자 상단메뉴 리스트 조회 -->
	<select id="selectMenuList" resultMap="menu">
		SELECT MENU_CODE
			, MENU_NAME
			, MENU_URI
		FROM TRIP_MENU
		WHERE MENU_CODE != 'SERVICE'
		ORDER BY MENU_CODE ASC
	</select>
	
	<!-- 하위메뉴 조회 -->
	<select id="selectSubMenuList" resultMap="subMenu">
		SELECT SUB_MENU_CODE
			, SUB_MENU_NAME
			, SUB_MENU_URI
			, MENU_CODE
		FROM TRIP_SUB_MENU
		WHERE MENU_CODE = #{menuCode}
		ORDER BY SUB_MENU_CODE ASC
	</select>
	
	<!-- 사이드메뉴 리스트 조회 -->
	<select id="selectSideMenuList" resultMap="sideMenu">
		SELECT SIDE_MENU_CODE
			, SIDE_MENU_NAME
			, SIDE_MENU_URI
			, MENU_CODE
			, ADMIN_MENU_CODE
		FROM TRIP_SIDE_MENU
		WHERE 1 = 1
		<if test="menuCode != null and !menuCode.equals('')">
		AND MENU_CODE = #{menuCode}
		</if>
		<if test="adminMenuCode != null and !adminMenuCode.equals('')">
		AND ADMIN_MENU_CODE = #{adminMenuCode}
		</if>
		ORDER BY SIDE_MENU_CODE ASC
	</select>
	
	<!-- 회원 목록 조회 -->
	<select id="selectMemberList" resultMap="memberMapper.member">
		SELECT MEM_ID
			, MEM_NAME
			, MEM_TELL
			, MEM_BIRTHDAY
			, JOIN_DATE
            , ROW_NUM
				FROM 
		(SELECT MEM_ID
					, MEM_NAME
					, MEM_TELL
					, MEM_BIRTHDAY
					, TO_CHAR(JOIN_DATE, 'YYYY-MM-DD') AS JOIN_DATE
		            , ROWNUM as ROW_NUM
				FROM TRIP_MEMBER
				ORDER BY JOIN_DATE DESC
		        , ROW_NUM DESC)
		 <!-- WHERE ROW_NUM &gt;= #{startNum} AND ROW_NUM &lt;= #{endNum} -->
	</select>
	
	<!-- 회원 상세정보 조회 -->
	<select id="selectMemberDetail" resultMap="memberMapper.member">
		SELECT MEM_ID
			, MEM_NAME
			, MEM_BIRTHDAY
			, MEM_GENDER
			, MEM_TELL
			, TO_CHAR(JOIN_DATE, 'YYYY"년 "MM"월 "DD"일"') AS JOIN_DATE
			, MEM_ADDR
			, MEM_ADDR_DETAIL
			, MEM_POINT
			, MEM_RANK
			, (SELECT NVL(COUNT(BOOK_NUM),0) FROM BOOK_ITEM WHERE MEM_ID= #{memId}) AS BUY_CNT
			, (SELECT NVL(SUM(BUY_PRICE),0) FROM BOOK_ITEM WHERE MEM_ID =  #{memId}) AS TOTAL_PRICE
			FROM TRIP_MEMBER
			WHERE MEM_ID = #{memId}
	</select>
	
	<!-- 회원 탈퇴 신청목록 -->
	<select id="selectDeactiveList" resultMap="memberMapper.member">
		SELECT MEM_ID
			, MEM_NAME
			, MEM_TELL
			, JOIN_DATE
			FROM TRIP_MEMBER
			WHERE IS_DEACTIVATE = 'Y'
	</select>
	
	<!-- 회원 탈퇴 승인 (관리자) -->
	<delete id="selectMemberSecession">
		DELETE TRIP_MEMBER
		WHERE MEM_ID IN 
		<foreach item="memId" collection="memIdArr" open="(" close=")" separator=", ">#{memId}</foreach>
	</delete>
	
	<!-- 상품카테고리(지역) 조회 -->
	<select id="selectItemCategory" resultMap="itemCate">
		SELECT CATE_CODE
			, CATE_NAME
		FROM ITEM_CATE
	</select>
	
	<!-- 전체 상품 수 -->
	<select id="selectItemListCnt" resultType="int">
		SELECT COUNT(DISTINCT ITEM_CODE)
		FROM TRIP_ITEM
	</select>
	
	<!-- 한 페이지당 출력되는 상품목록 -->
	<select id="selectPageItemList" resultMap="itemMapper.item">
	SELECT ITEM_CODE
	    , ITEM_NAME
	    , TRIP_DATE
	    , ITEM_PRICE
	    , CATE_CODE
	    , ROW_NUM
	    FROM (
		SELECT ITEM_CODE
		    , ITEM_NAME
		    , TRIP_DATE
		    , ITEM_PRICE
		    , CATE_CODE
		    , ROWNUM AS ROW_NUM
    	FROM (SELECT ITEM_CODE
		    , ITEM_NAME
		    , TRIP_DATE
		    , ITEM_PRICE
		    , CATE_CODE
		    FROM TRIP_ITEM
		    ORDER BY ITEM_CODE DESC))
	WHERE ROW_NUM &gt;= #{startNum} AND ROW_NUM &lt;= #{endNum}
	</select>
	
	<!-- 상품등록 ex. PKG001, 1박2일 -->
	<insert id="regItem">
		INSERT INTO TRIP_ITEM (
			ITEM_CODE
			, ITEM_NAME
			, ITEM_PRICE
			, ITEM_DETAIL
			, START_DATE
			, END_DATE
			, TRIP_DATE
			, CATE_CODE
			, TRIP_ADDR
			, LONGITUDE
			, LATITUDE
			, TRIP_AREA
		) VALUES (
			(SELECT 'PKG_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6, 3))), 0) + 1, 3, 0) FROM TRIP_ITEM)
			, #{itemName}
			, #{itemPrice}
			, #{itemDetail}
			, #{startDate}
			, #{endDate}
			, TO_CHAR(TO_DATE(#{endDate}) - TO_DATE(#{startDate})) ||'박'|| TO_CHAR(TO_DATE(#{endDate}) - TO_DATE(#{startDate}) + 1) ||'일'
			, #{cateCode}
			, #{tripAddr}
			, #{longitude}
			, #{latitude}
			, (SELECT CATE_NAME FROM ITEM_CATE WHERE CATE_CODE = #{cateCode})
		)
	</insert>
	
	<!-- 상품 이미지 등록 -->
	<insert id="insertImages">
		INSERT INTO ITEM_IMAGE(
			IMG_CODE
			, ORIGIN_IMG_NAME 
			, ATTACHED_IMG_NAME 
			, IS_MAIN 
			, ITEM_CODE
		) 
		<foreach collection="imageList" item="img" separator="UNION ALL">
		SELECT #{img.imgCode}
			, #{img.originImgName}
			, #{img.attachedImgName}
			, #{img.isMain}
			, #{img.itemCode}
		FROM DUAL
		</foreach>
	</insert>
	
	<update id="updateItem">
		UPDATE TRIP_ITEM
		SET
		ITEM_PRICE = #{itemPrice}
		, START_DATE = #{startDate}
		, END_DATE = #{endDate}
		, ITEM_DETAIL = #{itemDetail}
		, TRIP_DATE = TO_CHAR(TO_DATE(#{endDate}) - TO_DATE(#{startDate})) ||'박'|| TO_CHAR(TO_DATE(#{endDate}) - TO_DATE(#{startDate}) + 1) ||'일'
		WHERE ITEM_CODE = #{itemCode}
	</update>
	
	<!-- 다음에 올 아이템 코드 -->
	<select id="selectNextItemCode" resultType="String">
		SELECT 'PKG_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6, 3))), 0) + 1, 3, 0) FROM TRIP_ITEM
	</select>
	
	<!-- 다음에 올 이미지 코드 -->
	<select id="selectNextImgCode" resultType="int">
		SELECT NVL(MAX(IMG_CODE), 0) + 1 
		FROM ITEM_IMAGE
	</select>
	
	<!-- 등록된 상품 중 선택 상품 삭제(관리자) -->
	<delete id="deleteSelectedItem">
		DELETE TRIP_ITEM
		WHERE ITEM_CODE IN 
		<foreach item="itemCode" collection="itemCodeArr" open="(" close=")" separator=", ">#{itemCode}</foreach>
	</delete>
	
	
	<!-- 메인 슬라이드 이미지 등록 -->
	<insert id="regSlideImage">
		INSERT INTO SLIDE_IMAGE (
			IMG_CODE
			, ORIGIN_IMG_NAME
			, ATTACHED_IMG_NAME
			, IMAGE_INDEX
		) VALUES(
			(SELECT 'IMG_'|| LPAD(NVL(MAX(TO_NUMBER(SUBSTR(IMG_CODE, 6, 3))), 0) + 1, 3, 0)
			FROM SLIDE_IMAGE)
			, #{originImgName}
			, #{attachedImgName}
			, (SELECT NVL(MAX(IMAGE_INDEX), 0) + 1 FROM SLIDE_IMAGE)
		)
	</insert>
	
	<!-- 슬라이드 이미지 인덱스 -->
	<select id="selectImageIndex" resultType="int">
		SELECT NVL(MAX(IMAGE_INDEX), 0) + 1 
		FROM SLIDE_IMAGE
	</select>
	
	<!-- 메인 슬라이드 이미지 목록 -->
	<select id="selectSlideList" resultMap="slideImage">
		SELECT IMG_CODE
			, ATTACHED_IMG_NAME
			, IMAGE_INDEX
		FROM SLIDE_IMAGE
	</select>
	
	<!-- 메인 슬라이드 이미지 수정 -->
	<update id="updateSlideImage">
		UPDATE SLIDE_IMAGE
		SET 
		ORIGIN_IMG_NAME = #{originImgName}
		WHERE IMG_CODE = #{imgCode}
	</update>
	
	<!-- 패키지 예약 취소 -->
	<delete id="deleteBook">
		DELETE BOOK_ITEM
		WHERE BOOK_NUM = #{bookNum}
	</delete>
	
	<!-- 전체 패키지 예약 수 -->
	<select id="selectBookListCnt" resultType="int">
		SELECT COUNT(BOOK_NUM)
		FROM BOOK_ITEM
	</select>
	
	<!-- 한 페이지당 예약된 상품 목록 -->
	<select id="selectBookList" resultMap="buyMapper.bookView">
		SELECT BOOK_NUM
			, MEM_ID
		    , ITEM_NAME
		    , BUY_PRICE
		    , MEM_NAME
		    , TRAVELERS
		    , MEM_TELL
		    , BOOK_DATE
		    , ROW_NUM
            FROM(
			SELECT BOOK_NUM
				, MEM_ID
			    , ITEM_NAME
			    , BUY_PRICE
			    , MEM_NAME
			    , TRAVELERS
			    , MEM_TELL
			    , BOOK_DATE
			    , ROWNUM AS ROW_NUM
		    FROM
		    (SELECT BOOK_NUM
		    	, MEM_ID
		        , ITEM_NAME
		        , BUY_PRICE
		        , MEM_NAME
		        , TRAVELERS
		        , MEM_TELL
		        , BOOK_DATE
			    FROM BOOK_VIEW
		        ORDER BY BOOK_DATE DESC
		        ))
		WHERE ROW_NUM &gt;= #{startNum} AND ROW_NUM &lt;= #{endNum}
		ORDER BY ROW_NUM
	</select>
	
	<!-- 1:1문의 목록 -->
	<select id="selectEnquiryList" resultMap="boardMapper.board">
		SELECT BOARD_NUM
		    , TITLE
		    , WRITER
		    , CREATE_DATE
		    , ROW_NUM
		FROM(
		SELECT BOARD_NUM
		    , TITLE
		    , (SELECT MEM_NAME FROM TRIP_MEMBER WHERE TRIP_MEMBER.MEM_ID = TRIP_BOARD.WRITER) AS WRITER
		    , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		    , ROWNUM AS ROW_NUM
		    FROM TRIP_BOARD
		    WHERE SIDE_MENU_CODE = 'SIDE_MENU_002'
		    ORDER BY BOARD_NUM DESC)
	</select>
	
	<!-- 월별 매출 -->
	<select id="selectMonthSales" resultMap="buyMapper.buy">
		SELECT NVL(SUM(A.BUY_PRICE), 0) BUY_PRICE
		FROM (SELECT TO_CHAR(BOOK_DATE, 'YYYY-MM-DD') BOOK_DATE
		    , SUM(BUY_PRICE) BUY_PRICE FROM BOOK_ITEM
		    WHERE BOOK_DATE BETWEEN TO_DATE('2022-01-01', 'YYYY-MM-DD')
		    AND TO_DATE('2022-12-31', 'YYYY-MM-DD') GROUP BY BOOK_DATE) A
		    , (SELECT TO_DATE('2022-01-01', 'YYYY-MM-DD') + LEVEL - 1 AS DT FROM DUAL
		    CONNECT BY LEVEL &lt;= (TO_DATE('2022-12-31', 'YYYY-MM-DD') - TO_DATE('2022-01-01', 'YYYY-MM-DD') + 1)) B
		    WHERE B.DT = A.BOOK_DATE(+)
		    GROUP BY TO_CHAR(B.DT, 'MM')
		    ORDER BY TO_CHAR(B.DT, 'MM')
	</select>
	
	<!-- 연도별 매출 -->
	<select id="selectYearSales" resultMap="buyMapper.buy">
		SELECT TO_CHAR(B.DT, 'YYYY') AS BOOK_DATE
		    , NVL(SUM(A.BUY_PRICE), 0) BUY_PRICE
		FROM (SELECT TO_CHAR(BOOK_DATE, 'YYYY-MM-DD') BOOK_DATE
		    , SUM(BUY_PRICE) BUY_PRICE FROM BOOK_ITEM
		    WHERE BOOK_DATE BETWEEN TO_DATE('2022-01-01', 'YYYY-MM-DD')
		    AND TO_DATE(TO_CHAR(CURRENT_DATE, ' YYYY-MM-DD'), 'YYYY-MM-DD') GROUP BY BOOK_DATE) A
		    , (SELECT TO_DATE(#{searchFromDate}, 'YYYY-MM-DD') + LEVEL - 1 AS DT FROM DUAL
		    CONNECT BY LEVEL &lt;= (TO_DATE(TO_CHAR(CURRENT_DATE, ' YYYY-MM-DD'), 'YYYY-MM-DD') - TO_DATE(#{searchFromDate}, 'YYYY-MM-DD') + 1)) B
		    WHERE B.DT = A.BOOK_DATE(+)
		    GROUP BY TO_CHAR(B.DT, 'YYYY')
		    ORDER BY TO_CHAR(B.DT, 'YYYY')
	</select>
</mapper>










